// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transactionpool/transactionpool.proto
package transactionpool
import (
	context "context"
	fmt "fmt"
	utils "github.com/Aurorachain/go-aoa/internal/grpc/utils"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)
// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package
type BlockTransactionCountRequest struct {
	BlockNumber          int64    `protobuf:"varint,1,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	Hash                 []byte   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}
func (m *BlockTransactionCountRequest) Reset()         { *m = BlockTransactionCountRequest{} }
func (m *BlockTransactionCountRequest) String() string { return proto.CompactTextString(m) }
func (*BlockTransactionCountRequest) ProtoMessage()    {}
func (*BlockTransactionCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6b724221206a172, []int{0}
}
func (m *BlockTransactionCountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockTransactionCountRequest.Unmarshal(m, b)
}
func (m *BlockTransactionCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockTransactionCountRequest.Marshal(b, m, deterministic)
}
func (m *BlockTransactionCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockTransactionCountRequest.Merge(m, src)
}
func (m *BlockTransactionCountRequest) XXX_Size() int {
	return xxx_messageInfo_BlockTransactionCountRequest.Size(m)
}
func (m *BlockTransactionCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockTransactionCountRequest.DiscardUnknown(m)
}
var xxx_messageInfo_BlockTransactionCountRequest proto.InternalMessageInfo
func (m *BlockTransactionCountRequest) GetBlockNumber() int64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}
func (m *BlockTransactionCountRequest) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}
type BlockTransactionCountReply struct {
	Result               uint32   `protobuf:"fixed32,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}
func (m *BlockTransactionCountReply) Reset()         { *m = BlockTransactionCountReply{} }
func (m *BlockTransactionCountReply) String() string { return proto.CompactTextString(m) }
func (*BlockTransactionCountReply) ProtoMessage()    {}
func (*BlockTransactionCountReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6b724221206a172, []int{1}
}
func (m *BlockTransactionCountReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockTransactionCountReply.Unmarshal(m, b)
}
func (m *BlockTransactionCountReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockTransactionCountReply.Marshal(b, m, deterministic)
}
func (m *BlockTransactionCountReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockTransactionCountReply.Merge(m, src)
}
func (m *BlockTransactionCountReply) XXX_Size() int {
	return xxx_messageInfo_BlockTransactionCountReply.Size(m)
}
func (m *BlockTransactionCountReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockTransactionCountReply.DiscardUnknown(m)
}
var xxx_messageInfo_BlockTransactionCountReply proto.InternalMessageInfo
func (m *BlockTransactionCountReply) GetResult() uint32 {
	if m != nil {
		return m.Result
	}
	return 0
}
type TransactionCountRequest struct {
	Address              []byte   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	BlockNumber          int64    `protobuf:"varint,2,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}
func (m *TransactionCountRequest) Reset()         { *m = TransactionCountRequest{} }
func (m *TransactionCountRequest) String() string { return proto.CompactTextString(m) }
func (*TransactionCountRequest) ProtoMessage()    {}
func (*TransactionCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6b724221206a172, []int{2}
}
func (m *TransactionCountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionCountRequest.Unmarshal(m, b)
}
func (m *TransactionCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionCountRequest.Marshal(b, m, deterministic)
}
func (m *TransactionCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionCountRequest.Merge(m, src)
}
func (m *TransactionCountRequest) XXX_Size() int {
	return xxx_messageInfo_TransactionCountRequest.Size(m)
}
func (m *TransactionCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionCountRequest.DiscardUnknown(m)
}
var xxx_messageInfo_TransactionCountRequest proto.InternalMessageInfo
func (m *TransactionCountRequest) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}
func (m *TransactionCountRequest) GetBlockNumber() int64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}
type TransactionCountReply struct {
	Count                uint64   `protobuf:"fixed64,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}
func (m *TransactionCountReply) Reset()         { *m = TransactionCountReply{} }
func (m *TransactionCountReply) String() string { return proto.CompactTextString(m) }
func (*TransactionCountReply) ProtoMessage()    {}
func (*TransactionCountReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6b724221206a172, []int{3}
}
func (m *TransactionCountReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionCountReply.Unmarshal(m, b)
}
func (m *TransactionCountReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionCountReply.Marshal(b, m, deterministic)
}
func (m *TransactionCountReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionCountReply.Merge(m, src)
}
func (m *TransactionCountReply) XXX_Size() int {
	return xxx_messageInfo_TransactionCountReply.Size(m)
}
func (m *TransactionCountReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionCountReply.DiscardUnknown(m)
}
var xxx_messageInfo_TransactionCountReply proto.InternalMessageInfo
func (m *TransactionCountReply) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}
type RawTransactionRequest struct {
	Hash                 []byte   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	BlockNumber          int64    `protobuf:"varint,2,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	Index                uint64   `protobuf:"fixed64,3,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}
func (m *RawTransactionRequest) Reset()         { *m = RawTransactionRequest{} }
func (m *RawTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*RawTransactionRequest) ProtoMessage()    {}
func (*RawTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6b724221206a172, []int{4}
}
func (m *RawTransactionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawTransactionRequest.Unmarshal(m, b)
}
func (m *RawTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawTransactionRequest.Marshal(b, m, deterministic)
}
func (m *RawTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawTransactionRequest.Merge(m, src)
}
func (m *RawTransactionRequest) XXX_Size() int {
	return xxx_messageInfo_RawTransactionRequest.Size(m)
}
func (m *RawTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RawTransactionRequest.DiscardUnknown(m)
}
var xxx_messageInfo_RawTransactionRequest proto.InternalMessageInfo
func (m *RawTransactionRequest) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}
func (m *RawTransactionRequest) GetBlockNumber() int64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}
func (m *RawTransactionRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}
type RawTransactionReply struct {
	Result               []byte   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}
func (m *RawTransactionReply) Reset()         { *m = RawTransactionReply{} }
func (m *RawTransactionReply) String() string { return proto.CompactTextString(m) }
func (*RawTransactionReply) ProtoMessage()    {}
func (*RawTransactionReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6b724221206a172, []int{5}
}
func (m *RawTransactionReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawTransactionReply.Unmarshal(m, b)
}
func (m *RawTransactionReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawTransactionReply.Marshal(b, m, deterministic)
}
func (m *RawTransactionReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawTransactionReply.Merge(m, src)
}
func (m *RawTransactionReply) XXX_Size() int {
	return xxx_messageInfo_RawTransactionReply.Size(m)
}
func (m *RawTransactionReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RawTransactionReply.DiscardUnknown(m)
}
var xxx_messageInfo_RawTransactionReply proto.InternalMessageInfo
func (m *RawTransactionReply) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}
type TransactionReceiptRequest struct {
	Hash                 []byte   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}
func (m *TransactionReceiptRequest) Reset()         { *m = TransactionReceiptRequest{} }
func (m *TransactionReceiptRequest) String() string { return proto.CompactTextString(m) }
func (*TransactionReceiptRequest) ProtoMessage()    {}
func (*TransactionReceiptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6b724221206a172, []int{6}
}
func (m *TransactionReceiptRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionReceiptRequest.Unmarshal(m, b)
}
func (m *TransactionReceiptRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionReceiptRequest.Marshal(b, m, deterministic)
}
func (m *TransactionReceiptRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionReceiptRequest.Merge(m, src)
}
func (m *TransactionReceiptRequest) XXX_Size() int {
	return xxx_messageInfo_TransactionReceiptRequest.Size(m)
}
func (m *TransactionReceiptRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionReceiptRequest.DiscardUnknown(m)
}
var xxx_messageInfo_TransactionReceiptRequest proto.InternalMessageInfo
func (m *TransactionReceiptRequest) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}
type TransactionReceiptReply struct {
	//"action":            receipt.Action,
	//		"blockHash":         blockHash,
	//		"blockNumber":       hexutil.Uint64(blockNumber),
	//		"transactionHash":   hash,
	//		"transactionIndex":  hexutil.Uint64(index),
	//		"from":              from,
	//		"to":                tx.To(),
	//		"gasUsed":           hexutil.Uint64(receipt.GasUsed),
	//		"cumulativeGasUsed": hexutil.Uint64(receipt.CumulativeGasUsed),
	//		"contractAddress":   nil,
	//		"logs":              receipt.Logs,
	//		"logsBloom":         receipt.Bloom,
	Action               uint64      `protobuf:"fixed64,1,opt,name=action,proto3" json:"action,omitempty"`
	BlockHash            []byte      `protobuf:"bytes,2,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	BlockNumber          uint64      `protobuf:"fixed64,3,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	TransactionHash      []byte      `protobuf:"bytes,4,opt,name=transactionHash,proto3" json:"transactionHash,omitempty"`
	TransactionIndex     uint64      `protobuf:"fixed64,5,opt,name=transactionIndex,proto3" json:"transactionIndex,omitempty"`
	From                 []byte      `protobuf:"bytes,6,opt,name=from,proto3" json:"from,omitempty"`
	To                   []byte      `protobuf:"bytes,7,opt,name=to,proto3" json:"to,omitempty"`
	GasUsed              uint64      `protobuf:"fixed64,8,opt,name=gasUsed,proto3" json:"gasUsed,omitempty"`
	CumulativeGasUsed    uint64      `protobuf:"fixed64,9,opt,name=cumulativeGasUsed,proto3" json:"cumulativeGasUsed,omitempty"`
	ContractAddress      []byte      `protobuf:"bytes,10,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
	Logs                 []*Log      `protobuf:"bytes,11,rep,name=logs,proto3" json:"logs,omitempty"`
	LogsBloom            []byte      `protobuf:"bytes,12,opt,name=logsBloom,proto3" json:"logsBloom,omitempty"`
	Root                 []byte      `protobuf:"bytes,13,opt,name=root,proto3" json:"root,omitempty"`
	Status               uint32      `protobuf:"fixed32,14,opt,name=status,proto3" json:"status,omitempty"`
	InnerTxs             []*InnerTxs `protobuf:"bytes,15,rep,name=innerTxs,proto3" json:"innerTxs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}
func (m *TransactionReceiptReply) Reset()         { *m = TransactionReceiptReply{} }
func (m *TransactionReceiptReply) String() string { return proto.CompactTextString(m) }
func (*TransactionReceiptReply) ProtoMessage()    {}
func (*TransactionReceiptReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6b724221206a172, []int{7}
}
func (m *TransactionReceiptReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionReceiptReply.Unmarshal(m, b)
}
func (m *TransactionReceiptReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionReceiptReply.Marshal(b, m, deterministic)
}
func (m *TransactionReceiptReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionReceiptReply.Merge(m, src)
}
func (m *TransactionReceiptReply) XXX_Size() int {
	return xxx_messageInfo_TransactionReceiptReply.Size(m)
}
func (m *TransactionReceiptReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionReceiptReply.DiscardUnknown(m)
}
var xxx_messageInfo_TransactionReceiptReply proto.InternalMessageInfo
func (m *TransactionReceiptReply) GetAction() uint64 {
	if m != nil {
		return m.Action
	}
	return 0
}
func (m *TransactionReceiptReply) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}
func (m *TransactionReceiptReply) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}
func (m *TransactionReceiptReply) GetTransactionHash() []byte {
	if m != nil {
		return m.TransactionHash
	}
	return nil
}
func (m *TransactionReceiptReply) GetTransactionIndex() uint64 {
	if m != nil {
		return m.TransactionIndex
	}
	return 0
}
func (m *TransactionReceiptReply) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}
func (m *TransactionReceiptReply) GetTo() []byte {
	if m != nil {
		return m.To
	}
	return nil
}
func (m *TransactionReceiptReply) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}
func (m *TransactionReceiptReply) GetCumulativeGasUsed() uint64 {
	if m != nil {
		return m.CumulativeGasUsed
	}
	return 0
}
func (m *TransactionReceiptReply) GetContractAddress() []byte {
	if m != nil {
		return m.ContractAddress
	}
	return nil
}
func (m *TransactionReceiptReply) GetLogs() []*Log {
	if m != nil {
		return m.Logs
	}
	return nil
}
func (m *TransactionReceiptReply) GetLogsBloom() []byte {
	if m != nil {
		return m.LogsBloom
	}
	return nil
}
func (m *TransactionReceiptReply) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}
func (m *TransactionReceiptReply) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}
func (m *TransactionReceiptReply) GetInnerTxs() []*InnerTxs {
	if m != nil {
		return m.InnerTxs
	}
	return nil
}
type Log struct {
	//// Consensus fields:
	//// address of the contract that generated the event
	//Address common.Address `json:"address" gencodec:"required"`
	//// list of topics provided by the contract.
	//Topics []common.Hash `json:"topics" gencodec:"required"`
	//// supplied by the contract, usually ABI-encoded
	//Data []byte `json:"data" gencodec:"required"`
	//
	//// Derived fields. These fields are filled in by the node
	//// but not secured by consensus.
	//// block in which the transaction was included
	//BlockNumber uint64 `json:"blockNumber"`
	//// hash of the transaction
	//TxHash common.Hash `json:"transactionHash" gencodec:"required"`
	//// index of the transaction in the block
	//TxIndex uint `json:"transactionIndex" gencodec:"required"`
	//// hash of the block in which the transaction was included
	//BlockHash common.Hash `json:"blockHash"`
	//// index of the log in the receipt
	//Index uint `json:"logIndex" gencodec:"required"`
	//
	//// The Removed field is true if this log was reverted due to a chain reorganisation.
	//// You must pay attention to this field if you receive logs through a filter query.
	//Removed bool `json:"removed"`
	Address              []byte   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Topics               [][]byte `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	BlockNumber          uint64   `protobuf:"fixed64,4,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	TxHash               []byte   `protobuf:"bytes,5,opt,name=txHash,proto3" json:"txHash,omitempty"`
	TxIndex              uint32   `protobuf:"fixed32,6,opt,name=txIndex,proto3" json:"txIndex,omitempty"`
	BlockHash            []byte   `protobuf:"bytes,7,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	Index                uint32   `protobuf:"fixed32,8,opt,name=index,proto3" json:"index,omitempty"`
	Removed              bool     `protobuf:"varint,9,opt,name=removed,proto3" json:"removed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}
func (m *Log) Reset()         { *m = Log{} }
func (m *Log) String() string { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()    {}
func (*Log) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6b724221206a172, []int{8}
}
func (m *Log) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Log.Unmarshal(m, b)
}
func (m *Log) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Log.Marshal(b, m, deterministic)
}
func (m *Log) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log.Merge(m, src)
}
func (m *Log) XXX_Size() int {
	return xxx_messageInfo_Log.Size(m)
}
func (m *Log) XXX_DiscardUnknown() {
	xxx_messageInfo_Log.DiscardUnknown(m)
}
var xxx_messageInfo_Log proto.InternalMessageInfo
func (m *Log) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}
func (m *Log) GetTopics() [][]byte {
	if m != nil {
		return m.Topics
	}
	return nil
}
func (m *Log) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}
func (m *Log) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}
func (m *Log) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}
func (m *Log) GetTxIndex() uint32 {
	if m != nil {
		return m.TxIndex
	}
	return 0
}
func (m *Log) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}
func (m *Log) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}
func (m *Log) GetRemoved() bool {
	if m != nil {
		return m.Removed
	}
	return false
}
type InnerTxs struct {
	//    From    common.Address  `json:"from" gencodec:"required"`
	//    To      common.Address  `json:"to" gencodec:"to" gencodec:"required"`
	//    AssetID *common.Address `json:"assetid" rlp:"nil"`
	//    Value   *big.Int        `json:"value" gencodec:"required"`
	From                 []byte   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To                   []byte   `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	AssetId              []byte   `protobuf:"bytes,3,opt,name=assetId,proto3" json:"assetId,omitempty"`
	Value                []byte   `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}
func (m *InnerTxs) Reset()         { *m = InnerTxs{} }
func (m *InnerTxs) String() string { return proto.CompactTextString(m) }
func (*InnerTxs) ProtoMessage()    {}
func (*InnerTxs) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6b724221206a172, []int{9}
}
func (m *InnerTxs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InnerTxs.Unmarshal(m, b)
}
func (m *InnerTxs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InnerTxs.Marshal(b, m, deterministic)
}
func (m *InnerTxs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InnerTxs.Merge(m, src)
}
func (m *InnerTxs) XXX_Size() int {
	return xxx_messageInfo_InnerTxs.Size(m)
}
func (m *InnerTxs) XXX_DiscardUnknown() {
	xxx_messageInfo_InnerTxs.DiscardUnknown(m)
}
var xxx_messageInfo_InnerTxs proto.InternalMessageInfo
func (m *InnerTxs) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}
func (m *InnerTxs) GetTo() []byte {
	if m != nil {
		return m.To
	}
	return nil
}
func (m *InnerTxs) GetAssetId() []byte {
	if m != nil {
		return m.AssetId
	}
	return nil
}
func (m *InnerTxs) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}
type SendRawTransactionRequest struct {
	EncodedTx            []byte   `protobuf:"bytes,1,opt,name=encodedTx,proto3" json:"encodedTx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}
func (m *SendRawTransactionRequest) Reset()         { *m = SendRawTransactionRequest{} }
func (m *SendRawTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*SendRawTransactionRequest) ProtoMessage()    {}
func (*SendRawTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6b724221206a172, []int{10}
}
func (m *SendRawTransactionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendRawTransactionRequest.Unmarshal(m, b)
}
func (m *SendRawTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendRawTransactionRequest.Marshal(b, m, deterministic)
}
func (m *SendRawTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendRawTransactionRequest.Merge(m, src)
}
func (m *SendRawTransactionRequest) XXX_Size() int {
	return xxx_messageInfo_SendRawTransactionRequest.Size(m)
}
func (m *SendRawTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendRawTransactionRequest.DiscardUnknown(m)
}
var xxx_messageInfo_SendRawTransactionRequest proto.InternalMessageInfo
func (m *SendRawTransactionRequest) GetEncodedTx() []byte {
	if m != nil {
		return m.EncodedTx
	}
	return nil
}
type SendRawTransactionReply struct {
	Hash                 []byte   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}
func (m *SendRawTransactionReply) Reset()         { *m = SendRawTransactionReply{} }
func (m *SendRawTransactionReply) String() string { return proto.CompactTextString(m) }
func (*SendRawTransactionReply) ProtoMessage()    {}
func (*SendRawTransactionReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6b724221206a172, []int{11}
}
func (m *SendRawTransactionReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendRawTransactionReply.Unmarshal(m, b)
}
func (m *SendRawTransactionReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendRawTransactionReply.Marshal(b, m, deterministic)
}
func (m *SendRawTransactionReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendRawTransactionReply.Merge(m, src)
}
func (m *SendRawTransactionReply) XXX_Size() int {
	return xxx_messageInfo_SendRawTransactionReply.Size(m)
}
func (m *SendRawTransactionReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SendRawTransactionReply.DiscardUnknown(m)
}
var xxx_messageInfo_SendRawTransactionReply proto.InternalMessageInfo
func (m *SendRawTransactionReply) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}
type SendTransactionRequest struct {
	Tx                   *utils.SendTx `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}
func (m *SendTransactionRequest) Reset()         { *m = SendTransactionRequest{} }
func (m *SendTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*SendTransactionRequest) ProtoMessage()    {}
func (*SendTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6b724221206a172, []int{12}
}
func (m *SendTransactionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendTransactionRequest.Unmarshal(m, b)
}
func (m *SendTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendTransactionRequest.Marshal(b, m, deterministic)
}
func (m *SendTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendTransactionRequest.Merge(m, src)
}
func (m *SendTransactionRequest) XXX_Size() int {
	return xxx_messageInfo_SendTransactionRequest.Size(m)
}
func (m *SendTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendTransactionRequest.DiscardUnknown(m)
}
var xxx_messageInfo_SendTransactionRequest proto.InternalMessageInfo
func (m *SendTransactionRequest) GetTx() *utils.SendTx {
	if m != nil {
		return m.Tx
	}
	return nil
}
type SendTransactionReply struct {
	Hash                 []byte   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}
func (m *SendTransactionReply) Reset()         { *m = SendTransactionReply{} }
func (m *SendTransactionReply) String() string { return proto.CompactTextString(m) }
func (*SendTransactionReply) ProtoMessage()    {}
func (*SendTransactionReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6b724221206a172, []int{13}
}
func (m *SendTransactionReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendTransactionReply.Unmarshal(m, b)
}
func (m *SendTransactionReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendTransactionReply.Marshal(b, m, deterministic)
}
func (m *SendTransactionReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendTransactionReply.Merge(m, src)
}
func (m *SendTransactionReply) XXX_Size() int {
	return xxx_messageInfo_SendTransactionReply.Size(m)
}
func (m *SendTransactionReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SendTransactionReply.DiscardUnknown(m)
}
var xxx_messageInfo_SendTransactionReply proto.InternalMessageInfo
func (m *SendTransactionReply) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}
type SignRequest struct {
	Address              []byte   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}
func (m *SignRequest) Reset()         { *m = SignRequest{} }
func (m *SignRequest) String() string { return proto.CompactTextString(m) }
func (*SignRequest) ProtoMessage()    {}
func (*SignRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6b724221206a172, []int{14}
}
func (m *SignRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignRequest.Unmarshal(m, b)
}
func (m *SignRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignRequest.Marshal(b, m, deterministic)
}
func (m *SignRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignRequest.Merge(m, src)
}
func (m *SignRequest) XXX_Size() int {
	return xxx_messageInfo_SignRequest.Size(m)
}
func (m *SignRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignRequest.DiscardUnknown(m)
}
var xxx_messageInfo_SignRequest proto.InternalMessageInfo
func (m *SignRequest) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}
func (m *SignRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}
type SignReply struct {
	Signature            []byte   `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}
func (m *SignReply) Reset()         { *m = SignReply{} }
func (m *SignReply) String() string { return proto.CompactTextString(m) }
func (*SignReply) ProtoMessage()    {}
func (*SignReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6b724221206a172, []int{15}
}
func (m *SignReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignReply.Unmarshal(m, b)
}
func (m *SignReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignReply.Marshal(b, m, deterministic)
}
func (m *SignReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignReply.Merge(m, src)
}
func (m *SignReply) XXX_Size() int {
	return xxx_messageInfo_SignReply.Size(m)
}
func (m *SignReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SignReply.DiscardUnknown(m)
}
var xxx_messageInfo_SignReply proto.InternalMessageInfo
func (m *SignReply) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}
type SignTransactionRequest struct {
	Nonce                uint64        `protobuf:"fixed64,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	From                 string        `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	GasPrice             []byte        `protobuf:"bytes,3,opt,name=gasPrice,proto3" json:"gasPrice,omitempty"`
	Gas                  uint64        `protobuf:"fixed64,4,opt,name=gas,proto3" json:"gas,omitempty"`
	Tx                   *utils.SendTx `protobuf:"bytes,5,opt,name=tx,proto3" json:"tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}
func (m *SignTransactionRequest) Reset()         { *m = SignTransactionRequest{} }
func (m *SignTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*SignTransactionRequest) ProtoMessage()    {}
func (*SignTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6b724221206a172, []int{16}
}
func (m *SignTransactionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignTransactionRequest.Unmarshal(m, b)
}
func (m *SignTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignTransactionRequest.Marshal(b, m, deterministic)
}
func (m *SignTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignTransactionRequest.Merge(m, src)
}
func (m *SignTransactionRequest) XXX_Size() int {
	return xxx_messageInfo_SignTransactionRequest.Size(m)
}
func (m *SignTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignTransactionRequest.DiscardUnknown(m)
}
var xxx_messageInfo_SignTransactionRequest proto.InternalMessageInfo
func (m *SignTransactionRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}
func (m *SignTransactionRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}
func (m *SignTransactionRequest) GetGasPrice() []byte {
	if m != nil {
		return m.GasPrice
	}
	return nil
}
func (m *SignTransactionRequest) GetGas() uint64 {
	if m != nil {
		return m.Gas
	}
	return 0
}
func (m *SignTransactionRequest) GetTx() *utils.SendTx {
	if m != nil {
		return m.Tx
	}
	return nil
}
type SignTransactionReply struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	TxData               []byte   `protobuf:"bytes,2,opt,name=txData,proto3" json:"txData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}
func (m *SignTransactionReply) Reset()         { *m = SignTransactionReply{} }
func (m *SignTransactionReply) String() string { return proto.CompactTextString(m) }
func (*SignTransactionReply) ProtoMessage()    {}
func (*SignTransactionReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6b724221206a172, []int{17}
}
func (m *SignTransactionReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignTransactionReply.Unmarshal(m, b)
}
func (m *SignTransactionReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignTransactionReply.Marshal(b, m, deterministic)
}
func (m *SignTransactionReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignTransactionReply.Merge(m, src)
}
func (m *SignTransactionReply) XXX_Size() int {
	return xxx_messageInfo_SignTransactionReply.Size(m)
}
func (m *SignTransactionReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SignTransactionReply.DiscardUnknown(m)
}
var xxx_messageInfo_SignTransactionReply proto.InternalMessageInfo
func (m *SignTransactionReply) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}
func (m *SignTransactionReply) GetTxData() []byte {
	if m != nil {
		return m.TxData
	}
	return nil
}
type PendingTransactionsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}
func (m *PendingTransactionsRequest) Reset()         { *m = PendingTransactionsRequest{} }
func (m *PendingTransactionsRequest) String() string { return proto.CompactTextString(m) }
func (*PendingTransactionsRequest) ProtoMessage()    {}
func (*PendingTransactionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6b724221206a172, []int{18}
}
func (m *PendingTransactionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PendingTransactionsRequest.Unmarshal(m, b)
}
func (m *PendingTransactionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PendingTransactionsRequest.Marshal(b, m, deterministic)
}
func (m *PendingTransactionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingTransactionsRequest.Merge(m, src)
}
func (m *PendingTransactionsRequest) XXX_Size() int {
	return xxx_messageInfo_PendingTransactionsRequest.Size(m)
}
func (m *PendingTransactionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingTransactionsRequest.DiscardUnknown(m)
}
var xxx_messageInfo_PendingTransactionsRequest proto.InternalMessageInfo
type PendingTransactionsReply struct {
	Transactions         []*utils.RpcTransaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}
func (m *PendingTransactionsReply) Reset()         { *m = PendingTransactionsReply{} }
func (m *PendingTransactionsReply) String() string { return proto.CompactTextString(m) }
func (*PendingTransactionsReply) ProtoMessage()    {}
func (*PendingTransactionsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6b724221206a172, []int{19}
}
func (m *PendingTransactionsReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PendingTransactionsReply.Unmarshal(m, b)
}
func (m *PendingTransactionsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PendingTransactionsReply.Marshal(b, m, deterministic)
}
func (m *PendingTransactionsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingTransactionsReply.Merge(m, src)
}
func (m *PendingTransactionsReply) XXX_Size() int {
	return xxx_messageInfo_PendingTransactionsReply.Size(m)
}
func (m *PendingTransactionsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingTransactionsReply.DiscardUnknown(m)
}
var xxx_messageInfo_PendingTransactionsReply proto.InternalMessageInfo
func (m *PendingTransactionsReply) GetTransactions() []*utils.RpcTransaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}
type ResendRequest struct {
	GasPrice             []byte        `protobuf:"bytes,1,opt,name=gasPrice,proto3" json:"gasPrice,omitempty"`
	GasLimit             uint64        `protobuf:"fixed64,2,opt,name=gasLimit,proto3" json:"gasLimit,omitempty"`
	Tx                   *utils.SendTx `protobuf:"bytes,3,opt,name=tx,proto3" json:"tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}
func (m *ResendRequest) Reset()         { *m = ResendRequest{} }
func (m *ResendRequest) String() string { return proto.CompactTextString(m) }
func (*ResendRequest) ProtoMessage()    {}
func (*ResendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6b724221206a172, []int{20}
}
func (m *ResendRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResendRequest.Unmarshal(m, b)
}
func (m *ResendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResendRequest.Marshal(b, m, deterministic)
}
func (m *ResendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResendRequest.Merge(m, src)
}
func (m *ResendRequest) XXX_Size() int {
	return xxx_messageInfo_ResendRequest.Size(m)
}
func (m *ResendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResendRequest.DiscardUnknown(m)
}
var xxx_messageInfo_ResendRequest proto.InternalMessageInfo
func (m *ResendRequest) GetGasPrice() []byte {
	if m != nil {
		return m.GasPrice
	}
	return nil
}
func (m *ResendRequest) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}
func (m *ResendRequest) GetTx() *utils.SendTx {
	if m != nil {
		return m.Tx
	}
	return nil
}
type ResendReply struct {
	Hash                 []byte   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}
func (m *ResendReply) Reset()         { *m = ResendReply{} }
func (m *ResendReply) String() string { return proto.CompactTextString(m) }
func (*ResendReply) ProtoMessage()    {}
func (*ResendReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6b724221206a172, []int{21}
}
func (m *ResendReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResendReply.Unmarshal(m, b)
}
func (m *ResendReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResendReply.Marshal(b, m, deterministic)
}
func (m *ResendReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResendReply.Merge(m, src)
}
func (m *ResendReply) XXX_Size() int {
	return xxx_messageInfo_ResendReply.Size(m)
}
func (m *ResendReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ResendReply.DiscardUnknown(m)
}
var xxx_messageInfo_ResendReply proto.InternalMessageInfo
func (m *ResendReply) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}
func init() {
	proto.RegisterType((*BlockTransactionCountRequest)(nil), "transactionpool.BlockTransactionCountRequest")
	proto.RegisterType((*BlockTransactionCountReply)(nil), "transactionpool.BlockTransactionCountReply")
	proto.RegisterType((*TransactionCountRequest)(nil), "transactionpool.TransactionCountRequest")
	proto.RegisterType((*TransactionCountReply)(nil), "transactionpool.TransactionCountReply")
	proto.RegisterType((*RawTransactionRequest)(nil), "transactionpool.RawTransactionRequest")
	proto.RegisterType((*RawTransactionReply)(nil), "transactionpool.RawTransactionReply")
	proto.RegisterType((*TransactionReceiptRequest)(nil), "transactionpool.TransactionReceiptRequest")
	proto.RegisterType((*TransactionReceiptReply)(nil), "transactionpool.TransactionReceiptReply")
	proto.RegisterType((*Log)(nil), "transactionpool.Log")
	proto.RegisterType((*InnerTxs)(nil), "transactionpool.InnerTxs")
	proto.RegisterType((*SendRawTransactionRequest)(nil), "transactionpool.SendRawTransactionRequest")
	proto.RegisterType((*SendRawTransactionReply)(nil), "transactionpool.SendRawTransactionReply")
	proto.RegisterType((*SendTransactionRequest)(nil), "transactionpool.SendTransactionRequest")
	proto.RegisterType((*SendTransactionReply)(nil), "transactionpool.SendTransactionReply")
	proto.RegisterType((*SignRequest)(nil), "transactionpool.SignRequest")
	proto.RegisterType((*SignReply)(nil), "transactionpool.SignReply")
	proto.RegisterType((*SignTransactionRequest)(nil), "transactionpool.SignTransactionRequest")
	proto.RegisterType((*SignTransactionReply)(nil), "transactionpool.SignTransactionReply")
	proto.RegisterType((*PendingTransactionsRequest)(nil), "transactionpool.PendingTransactionsRequest")
	proto.RegisterType((*PendingTransactionsReply)(nil), "transactionpool.PendingTransactionsReply")
	proto.RegisterType((*ResendRequest)(nil), "transactionpool.ResendRequest")
	proto.RegisterType((*ResendReply)(nil), "transactionpool.ResendReply")
}
func init() {
	proto.RegisterFile("transactionpool/transactionpool.proto", fileDescriptor_b6b724221206a172)
}
var fileDescriptor_b6b724221206a172 = []byte{
	// 1124 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x4b, 0x6f, 0xdb, 0x46,
	0x10, 0xb6, 0x1e, 0x96, 0xa5, 0x91, 0x6c, 0xa7, 0x6b, 0xd9, 0xa6, 0x09, 0x35, 0x50, 0xb6, 0x89,
	0xa1, 0xb8, 0xb5, 0x0d, 0xb8, 0x2d, 0x8a, 0xa0, 0xa7, 0xa8, 0x05, 0x1a, 0x15, 0x46, 0x61, 0x30,
	0x36, 0x8a, 0x5e, 0x0a, 0xd0, 0xe4, 0x86, 0x21, 0x4a, 0x71, 0x55, 0xee, 0xd2, 0x91, 0x2f, 0x45,
	0x8f, 0xbd, 0xf5, 0xbf, 0xf4, 0x7f, 0xf5, 0x3f, 0x14, 0xfb, 0x20, 0xc5, 0xa7, 0x6d, 0x34, 0xc9,
	0x49, 0x3b, 0xb3, 0xb3, 0xf3, 0xcd, 0xe3, 0xdb, 0x59, 0x0a, 0x9e, 0xf1, 0xc8, 0x0e, 0x99, 0xed,
	0x70, 0x9f, 0x86, 0x0b, 0x4a, 0x83, 0xd3, 0x82, 0x7c, 0xb2, 0x88, 0x28, 0xa7, 0x68, 0xbb, 0xa0,
	0x36, 0x51, 0xcc, 0xfd, 0x80, 0x9d, 0x3a, 0x74, 0x3e, 0xa7, 0xa1, 0x32, 0xc2, 0x97, 0x30, 0x9a,
	0x06, 0xd4, 0xf9, 0xed, 0x72, 0x65, 0xfb, 0x1d, 0x8d, 0x43, 0x6e, 0x91, 0xdf, 0x63, 0xc2, 0x38,
	0x1a, 0x43, 0xff, 0x5a, 0xec, 0xff, 0x14, 0xcf, 0xaf, 0x49, 0x64, 0x34, 0xc6, 0x8d, 0x49, 0xcb,
	0xca, 0xaa, 0x10, 0x82, 0xf6, 0x5b, 0x9b, 0xbd, 0x35, 0x9a, 0xe3, 0xc6, 0x64, 0x60, 0xc9, 0x35,
	0xfe, 0x0a, 0xcc, 0x1a, 0xaf, 0x8b, 0xe0, 0x16, 0xed, 0x41, 0x27, 0x22, 0x2c, 0x0e, 0xb8, 0x74,
	0xb7, 0x61, 0x69, 0x09, 0x5f, 0xc1, 0x7e, 0x5d, 0x18, 0x06, 0x6c, 0xd8, 0xae, 0x1b, 0x11, 0xc6,
	0xe4, 0x99, 0x81, 0x95, 0x88, 0xc5, 0x00, 0x9b, 0xa5, 0x00, 0xf1, 0x31, 0xec, 0x56, 0xc7, 0x31,
	0x84, 0x75, 0x47, 0x48, 0xd2, 0x65, 0xc7, 0x52, 0x02, 0x76, 0x60, 0xd7, 0xb2, 0xdf, 0x65, 0x4e,
	0x24, 0x31, 0x24, 0x89, 0x36, 0x56, 0x89, 0xde, 0x8f, 0x2e, 0x40, 0xfc, 0xd0, 0x25, 0x4b, 0xa3,
	0xa5, 0x40, 0xa4, 0x80, 0x8f, 0x61, 0xa7, 0x08, 0x52, 0xae, 0xcc, 0x20, 0xad, 0xcc, 0x29, 0x1c,
	0xe4, 0x6c, 0x1d, 0xe2, 0x2f, 0xf8, 0x1d, 0x71, 0xe1, 0xbf, 0xda, 0xb9, 0x5a, 0xa6, 0x27, 0x34,
	0x88, 0xd2, 0xea, 0xbc, 0xb5, 0x84, 0x46, 0xd0, 0x93, 0x81, 0xbf, 0x5a, 0x75, 0x73, 0xa5, 0x28,
	0x66, 0xaa, 0xb2, 0xc9, 0x65, 0x3a, 0x81, 0x2c, 0xe3, 0xa4, 0x97, 0xb6, 0xf4, 0x52, 0x54, 0xa3,
	0x23, 0x78, 0x94, 0x51, 0xcd, 0x64, 0x79, 0xd6, 0xa5, 0xc3, 0x92, 0x5e, 0x64, 0xf7, 0x26, 0xa2,
	0x73, 0xa3, 0xa3, 0xb2, 0x13, 0x6b, 0xb4, 0x05, 0x4d, 0x4e, 0x8d, 0x0d, 0xa9, 0x69, 0x72, 0x2a,
	0xd8, 0xe1, 0xd9, 0xec, 0x8a, 0x11, 0xd7, 0xe8, 0x4a, 0x37, 0x89, 0x88, 0xbe, 0x80, 0x4f, 0x9c,
	0x78, 0x1e, 0x07, 0x36, 0xf7, 0x6f, 0xc8, 0x0f, 0xda, 0xa6, 0x27, 0x6d, 0xca, 0x1b, 0x22, 0x03,
	0x87, 0x86, 0x3c, 0xb2, 0x1d, 0xfe, 0x52, 0xb3, 0x0d, 0x54, 0x06, 0x05, 0x35, 0x9a, 0x40, 0x3b,
	0xa0, 0x1e, 0x33, 0xfa, 0xe3, 0xd6, 0xa4, 0x7f, 0x36, 0x3c, 0x29, 0xde, 0xc0, 0x73, 0xea, 0x59,
	0xd2, 0x42, 0x54, 0x55, 0xfc, 0x4e, 0x03, 0x4a, 0xe7, 0xc6, 0x40, 0x55, 0x35, 0x55, 0x88, 0xec,
	0x22, 0x4a, 0xb9, 0xb1, 0xa9, 0xb2, 0x13, 0x6b, 0xd1, 0x1f, 0xc6, 0x6d, 0x1e, 0x33, 0x63, 0x4b,
	0x5d, 0x0f, 0x25, 0xa1, 0xaf, 0xa1, 0xeb, 0x87, 0x21, 0x89, 0x2e, 0x97, 0xcc, 0xd8, 0x96, 0xb8,
	0x07, 0x25, 0xdc, 0x99, 0x36, 0xb0, 0x52, 0x53, 0xfc, 0x6f, 0x03, 0x5a, 0xe7, 0xd4, 0xbb, 0xe3,
	0x0a, 0xed, 0x41, 0x87, 0xd3, 0x85, 0xef, 0x30, 0xa3, 0x39, 0x6e, 0x09, 0xd6, 0x29, 0x49, 0x04,
	0xe7, 0xda, 0xdc, 0x96, 0xbd, 0x1e, 0x58, 0x72, 0x5d, 0xa4, 0x41, 0xbb, 0x4c, 0x03, 0xe1, 0x6d,
	0x29, 0xbb, 0xbf, 0xae, 0x38, 0xac, 0x24, 0x81, 0xcf, 0x97, 0xaa, 0xd7, 0x1d, 0x99, 0x57, 0x22,
	0xe6, 0x89, 0xb7, 0x51, 0x24, 0x5e, 0x7a, 0x81, 0xba, 0xf2, 0x94, 0x12, 0x84, 0xb7, 0x88, 0xcc,
	0xe9, 0x8d, 0x6e, 0x67, 0xd7, 0x4a, 0x44, 0xfc, 0x2b, 0x74, 0x93, 0x2a, 0xa4, 0xe4, 0x69, 0x94,
	0xc8, 0xd3, 0xcc, 0x92, 0xc7, 0x66, 0x8c, 0xf0, 0x99, 0xab, 0x13, 0x4d, 0x44, 0x81, 0x7c, 0x63,
	0x07, 0x31, 0xd1, 0x34, 0x56, 0x02, 0x7e, 0x01, 0x07, 0xaf, 0x49, 0xe8, 0x56, 0xcf, 0x88, 0x11,
	0xf4, 0x48, 0xe8, 0x50, 0x97, 0xb8, 0x97, 0x4b, 0x8d, 0xba, 0x52, 0xe0, 0x63, 0xd8, 0xaf, 0x3a,
	0x2a, 0x2e, 0x65, 0xd5, 0x25, 0xfe, 0x06, 0xf6, 0x84, 0x79, 0x05, 0xcc, 0xa7, 0xd0, 0xe4, 0xca,
	0x7f, 0xff, 0x6c, 0xf3, 0x44, 0x8e, 0xf5, 0x13, 0x69, 0xba, 0xb4, 0x9a, 0x7c, 0x89, 0x8f, 0x60,
	0x58, 0x3a, 0x58, 0x07, 0xf2, 0x2d, 0xf4, 0x5f, 0xfb, 0x5e, 0x78, 0xff, 0xa0, 0x4d, 0xd8, 0xd0,
	0x5c, 0xb1, 0x01, 0x3f, 0x87, 0x9e, 0x3a, 0x2c, 0xbc, 0x8f, 0xa0, 0xc7, 0x7c, 0x2f, 0xb4, 0x79,
	0x1c, 0x91, 0x24, 0xf7, 0x54, 0x81, 0xff, 0x6e, 0xc0, 0x9e, 0xb0, 0xad, 0xc8, 0x66, 0x08, 0xeb,
	0x21, 0x0d, 0x1d, 0x92, 0xcc, 0x61, 0x29, 0xa4, 0xbd, 0x13, 0x78, 0x3d, 0xdd, 0x3b, 0x13, 0xba,
	0x9e, 0xcd, 0x2e, 0x22, 0xdf, 0x21, 0xba, 0x59, 0xa9, 0x8c, 0x1e, 0x41, 0xcb, 0xb3, 0x99, 0x66,
	0xa4, 0x58, 0xea, 0x2a, 0xad, 0xd7, 0x55, 0x69, 0x0a, 0xc3, 0x52, 0x40, 0xba, 0x4a, 0x32, 0xd1,
	0x46, 0x86, 0xf6, 0x92, 0xd4, 0xdf, 0xaf, 0xd2, 0xd7, 0x12, 0x1e, 0x81, 0x79, 0x41, 0x42, 0xd7,
	0x0f, 0xbd, 0x8c, 0x1b, 0xa6, 0x13, 0xc3, 0x57, 0x60, 0x54, 0xee, 0x0a, 0x94, 0x17, 0x30, 0xc8,
	0x5c, 0x5e, 0x51, 0x6d, 0x71, 0xa3, 0x77, 0x75, 0x98, 0xd6, 0xc2, 0xc9, 0xc6, 0x95, 0x33, 0xc5,
	0x6f, 0x60, 0xd3, 0x22, 0x4c, 0x10, 0x49, 0x17, 0x30, 0x5b, 0x96, 0x46, 0xa1, 0x2c, 0x6a, 0xef,
	0xdc, 0x9f, 0xfb, 0x5c, 0xc6, 0xde, 0xb1, 0x52, 0x59, 0x17, 0xa8, 0x55, 0x57, 0xa0, 0x27, 0xd0,
	0x4f, 0x70, 0x6a, 0xd8, 0x73, 0xf6, 0xcf, 0x26, 0x6c, 0x67, 0x02, 0xbd, 0xa0, 0x34, 0x40, 0x7f,
	0x36, 0x60, 0xec, 0x11, 0x5e, 0xf9, 0x01, 0x30, 0xbd, 0xd5, 0x53, 0xe2, 0xb8, 0x34, 0xba, 0xee,
	0xfa, 0x0c, 0x31, 0x3f, 0x7f, 0xa8, 0xf9, 0x22, 0xb8, 0xc5, 0x6b, 0xe8, 0x0f, 0x78, 0x5c, 0x1f,
	0x81, 0x9c, 0x2a, 0x1f, 0x17, 0xff, 0x17, 0xf8, 0xcc, 0x23, 0x3c, 0xb3, 0x3b, 0xbd, 0x9d, 0xae,
	0x46, 0xe4, 0xcb, 0xd0, 0x55, 0x83, 0xef, 0x40, 0xd7, 0xbc, 0x7c, 0x27, 0xcc, 0x6a, 0x22, 0xe0,
	0x35, 0xf4, 0x33, 0x3c, 0xa9, 0x74, 0x2d, 0xb2, 0x7a, 0x2f, 0xc7, 0x4b, 0x38, 0xf4, 0x08, 0xcf,
	0xcf, 0xa6, 0xea, 0xb0, 0x0f, 0x4b, 0xc5, 0xa8, 0x1c, 0x86, 0xe6, 0xd3, 0x7b, 0xed, 0x54, 0xb5,
	0x6e, 0xe0, 0x69, 0x1d, 0x72, 0x2e, 0xab, 0x0f, 0x8d, 0xeb, 0xc3, 0x4e, 0xbe, 0x94, 0xb2, 0x87,
	0x68, 0x52, 0x3a, 0x5e, 0xc7, 0x8a, 0xc3, 0x07, 0x58, 0x2a, 0xa8, 0x77, 0xc5, 0xae, 0xc9, 0xdd,
	0x59, 0xe8, 0x04, 0xb1, 0x4b, 0xf4, 0x8c, 0xf8, 0x28, 0xc0, 0x3f, 0xc2, 0xb0, 0x48, 0x17, 0xc9,
	0xff, 0xff, 0xc3, 0x10, 0x1f, 0xf6, 0x2b, 0xfa, 0x24, 0xdd, 0x7d, 0xe8, 0xd6, 0x50, 0xd8, 0xcd,
	0x87, 0xad, 0xbf, 0x60, 0xd1, 0xd1, 0x5d, 0x99, 0xe7, 0x3f, 0x8c, 0xcd, 0xc9, 0x83, 0x6c, 0x15,
	0x60, 0x00, 0x88, 0x95, 0x9e, 0xe6, 0x0a, 0xb4, 0xda, 0xa7, 0xbf, 0x02, 0xad, 0xe6, 0xad, 0xc7,
	0x6b, 0xe8, 0x0c, 0xb6, 0x0b, 0x0f, 0x34, 0xca, 0xcf, 0x5f, 0x73, 0x2b, 0xe9, 0xcf, 0x32, 0x39,
	0x33, 0x85, 0xb6, 0x78, 0x4d, 0xd1, 0xa8, 0x8c, 0xb3, 0x7a, 0xbf, 0x4d, 0xb3, 0x66, 0x57, 0xf9,
	0x98, 0xc1, 0x36, 0xcb, 0x3f, 0x79, 0x45, 0xdc, 0x67, 0x95, 0xe7, 0x2b, 0x3b, 0xb4, 0xb3, 0x28,
	0xbf, 0x6d, 0xa8, 0x3c, 0x28, 0xeb, 0xdf, 0x47, 0xf3, 0xf9, 0xc3, 0x8c, 0x15, 0xe0, 0x2b, 0xf9,
	0xdf, 0x88, 0x84, 0x2e, 0x7a, 0x5c, 0x26, 0x51, 0xf6, 0x39, 0x34, 0x47, 0xb5, 0xfb, 0xd2, 0xd3,
	0x75, 0x47, 0xfe, 0xf5, 0xfd, 0xf2, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x94, 0xc8, 0x7f, 0xdf,
	0x48, 0x0f, 0x00, 0x00,
}
// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn
// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4
// TransactionPoolClient is the client API for TransactionPool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransactionPoolClient interface {
	GetBlockTransactionCountByNumber(ctx context.Context, in *BlockTransactionCountRequest, opts ...grpc.CallOption) (*BlockTransactionCountReply, error)
	GetBlockTransactionCountByHash(ctx context.Context, in *BlockTransactionCountRequest, opts ...grpc.CallOption) (*BlockTransactionCountReply, error)
	GetTransactionByBlockNumberAndIndex(ctx context.Context, in *utils.TransactionRequest, opts ...grpc.CallOption) (*utils.RpcTransaction, error)
	GetTransactionByBlockHashAndIndex(ctx context.Context, in *utils.TransactionRequest, opts ...grpc.CallOption) (*utils.RpcTransaction, error)
	GetRawTransactionByBlockNumberAndIndex(ctx context.Context, in *RawTransactionRequest, opts ...grpc.CallOption) (*RawTransactionReply, error)
	GetRawTransactionByBlockHashAndIndex(ctx context.Context, in *RawTransactionRequest, opts ...grpc.CallOption) (*RawTransactionReply, error)
	GetTransactionCount(ctx context.Context, in *TransactionCountRequest, opts ...grpc.CallOption) (*TransactionCountReply, error)
	GetTransactionCountIncludePending(ctx context.Context, in *TransactionCountRequest, opts ...grpc.CallOption) (*TransactionCountReply, error)
	GetTransactionByHash(ctx context.Context, in *utils.TransactionRequest, opts ...grpc.CallOption) (*utils.RpcTransaction, error)
	GetRawTransactionByHash(ctx context.Context, in *RawTransactionRequest, opts ...grpc.CallOption) (*RawTransactionReply, error)
	GetTransactionReceipt(ctx context.Context, in *TransactionReceiptRequest, opts ...grpc.CallOption) (*TransactionReceiptReply, error)
	SendRawTransaction(ctx context.Context, in *SendRawTransactionRequest, opts ...grpc.CallOption) (*SendRawTransactionReply, error)
	SendTransaction(ctx context.Context, in *utils.SendTx, opts ...grpc.CallOption) (*utils.TxReply, error)
	Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignReply, error)
	SignTransaction(ctx context.Context, in *utils.SendTx, opts ...grpc.CallOption) (*SignTransactionReply, error)
	PendingTransactions(ctx context.Context, in *PendingTransactionsRequest, opts ...grpc.CallOption) (*PendingTransactionsReply, error)
	Resend(ctx context.Context, in *ResendRequest, opts ...grpc.CallOption) (*ResendReply, error)
}
type transactionPoolClient struct {
	cc *grpc.ClientConn
}
func NewTransactionPoolClient(cc *grpc.ClientConn) TransactionPoolClient {
	return &transactionPoolClient{cc}
}
func (c *transactionPoolClient) GetBlockTransactionCountByNumber(ctx context.Context, in *BlockTransactionCountRequest, opts ...grpc.CallOption) (*BlockTransactionCountReply, error) {
	out := new(BlockTransactionCountReply)
	err := c.cc.Invoke(ctx, "/transactionpool.TransactionPool/getBlockTransactionCountByNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (c *transactionPoolClient) GetBlockTransactionCountByHash(ctx context.Context, in *BlockTransactionCountRequest, opts ...grpc.CallOption) (*BlockTransactionCountReply, error) {
	out := new(BlockTransactionCountReply)
	err := c.cc.Invoke(ctx, "/transactionpool.TransactionPool/getBlockTransactionCountByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (c *transactionPoolClient) GetTransactionByBlockNumberAndIndex(ctx context.Context, in *utils.TransactionRequest, opts ...grpc.CallOption) (*utils.RpcTransaction, error) {
	out := new(utils.RpcTransaction)
	err := c.cc.Invoke(ctx, "/transactionpool.TransactionPool/getTransactionByBlockNumberAndIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (c *transactionPoolClient) GetTransactionByBlockHashAndIndex(ctx context.Context, in *utils.TransactionRequest, opts ...grpc.CallOption) (*utils.RpcTransaction, error) {
	out := new(utils.RpcTransaction)
	err := c.cc.Invoke(ctx, "/transactionpool.TransactionPool/getTransactionByBlockHashAndIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (c *transactionPoolClient) GetRawTransactionByBlockNumberAndIndex(ctx context.Context, in *RawTransactionRequest, opts ...grpc.CallOption) (*RawTransactionReply, error) {
	out := new(RawTransactionReply)
	err := c.cc.Invoke(ctx, "/transactionpool.TransactionPool/getRawTransactionByBlockNumberAndIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (c *transactionPoolClient) GetRawTransactionByBlockHashAndIndex(ctx context.Context, in *RawTransactionRequest, opts ...grpc.CallOption) (*RawTransactionReply, error) {
	out := new(RawTransactionReply)
	err := c.cc.Invoke(ctx, "/transactionpool.TransactionPool/getRawTransactionByBlockHashAndIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (c *transactionPoolClient) GetTransactionCount(ctx context.Context, in *TransactionCountRequest, opts ...grpc.CallOption) (*TransactionCountReply, error) {
	out := new(TransactionCountReply)
	err := c.cc.Invoke(ctx, "/transactionpool.TransactionPool/getTransactionCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (c *transactionPoolClient) GetTransactionCountIncludePending(ctx context.Context, in *TransactionCountRequest, opts ...grpc.CallOption) (*TransactionCountReply, error) {
	out := new(TransactionCountReply)
	err := c.cc.Invoke(ctx, "/transactionpool.TransactionPool/getTransactionCountIncludePending", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (c *transactionPoolClient) GetTransactionByHash(ctx context.Context, in *utils.TransactionRequest, opts ...grpc.CallOption) (*utils.RpcTransaction, error) {
	out := new(utils.RpcTransaction)
	err := c.cc.Invoke(ctx, "/transactionpool.TransactionPool/getTransactionByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (c *transactionPoolClient) GetRawTransactionByHash(ctx context.Context, in *RawTransactionRequest, opts ...grpc.CallOption) (*RawTransactionReply, error) {
	out := new(RawTransactionReply)
	err := c.cc.Invoke(ctx, "/transactionpool.TransactionPool/getRawTransactionByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (c *transactionPoolClient) GetTransactionReceipt(ctx context.Context, in *TransactionReceiptRequest, opts ...grpc.CallOption) (*TransactionReceiptReply, error) {
	out := new(TransactionReceiptReply)
	err := c.cc.Invoke(ctx, "/transactionpool.TransactionPool/getTransactionReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (c *transactionPoolClient) SendRawTransaction(ctx context.Context, in *SendRawTransactionRequest, opts ...grpc.CallOption) (*SendRawTransactionReply, error) {
	out := new(SendRawTransactionReply)
	err := c.cc.Invoke(ctx, "/transactionpool.TransactionPool/sendRawTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (c *transactionPoolClient) SendTransaction(ctx context.Context, in *utils.SendTx, opts ...grpc.CallOption) (*utils.TxReply, error) {
	out := new(utils.TxReply)
	err := c.cc.Invoke(ctx, "/transactionpool.TransactionPool/SendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (c *transactionPoolClient) Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignReply, error) {
	out := new(SignReply)
	err := c.cc.Invoke(ctx, "/transactionpool.TransactionPool/sign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (c *transactionPoolClient) SignTransaction(ctx context.Context, in *utils.SendTx, opts ...grpc.CallOption) (*SignTransactionReply, error) {
	out := new(SignTransactionReply)
	err := c.cc.Invoke(ctx, "/transactionpool.TransactionPool/signTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (c *transactionPoolClient) PendingTransactions(ctx context.Context, in *PendingTransactionsRequest, opts ...grpc.CallOption) (*PendingTransactionsReply, error) {
	out := new(PendingTransactionsReply)
	err := c.cc.Invoke(ctx, "/transactionpool.TransactionPool/pendingTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (c *transactionPoolClient) Resend(ctx context.Context, in *ResendRequest, opts ...grpc.CallOption) (*ResendReply, error) {
	out := new(ResendReply)
	err := c.cc.Invoke(ctx, "/transactionpool.TransactionPool/resend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
// TransactionPoolServer is the server API for TransactionPool service.
type TransactionPoolServer interface {
	GetBlockTransactionCountByNumber(context.Context, *BlockTransactionCountRequest) (*BlockTransactionCountReply, error)
	GetBlockTransactionCountByHash(context.Context, *BlockTransactionCountRequest) (*BlockTransactionCountReply, error)
	GetTransactionByBlockNumberAndIndex(context.Context, *utils.TransactionRequest) (*utils.RpcTransaction, error)
	GetTransactionByBlockHashAndIndex(context.Context, *utils.TransactionRequest) (*utils.RpcTransaction, error)
	GetRawTransactionByBlockNumberAndIndex(context.Context, *RawTransactionRequest) (*RawTransactionReply, error)
	GetRawTransactionByBlockHashAndIndex(context.Context, *RawTransactionRequest) (*RawTransactionReply, error)
	GetTransactionCount(context.Context, *TransactionCountRequest) (*TransactionCountReply, error)
	GetTransactionCountIncludePending(context.Context, *TransactionCountRequest) (*TransactionCountReply, error)
	GetTransactionByHash(context.Context, *utils.TransactionRequest) (*utils.RpcTransaction, error)
	GetRawTransactionByHash(context.Context, *RawTransactionRequest) (*RawTransactionReply, error)
	GetTransactionReceipt(context.Context, *TransactionReceiptRequest) (*TransactionReceiptReply, error)
	SendRawTransaction(context.Context, *SendRawTransactionRequest) (*SendRawTransactionReply, error)
	SendTransaction(context.Context, *utils.SendTx) (*utils.TxReply, error)
	Sign(context.Context, *SignRequest) (*SignReply, error)
	SignTransaction(context.Context, *utils.SendTx) (*SignTransactionReply, error)
	PendingTransactions(context.Context, *PendingTransactionsRequest) (*PendingTransactionsReply, error)
	Resend(context.Context, *ResendRequest) (*ResendReply, error)
}
// UnimplementedTransactionPoolServer can be embedded to have forward compatible implementations.
type UnimplementedTransactionPoolServer struct {
}
func (*UnimplementedTransactionPoolServer) GetBlockTransactionCountByNumber(ctx context.Context, req *BlockTransactionCountRequest) (*BlockTransactionCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockTransactionCountByNumber not implemented")
}
func (*UnimplementedTransactionPoolServer) GetBlockTransactionCountByHash(ctx context.Context, req *BlockTransactionCountRequest) (*BlockTransactionCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockTransactionCountByHash not implemented")
}
func (*UnimplementedTransactionPoolServer) GetTransactionByBlockNumberAndIndex(ctx context.Context, req *utils.TransactionRequest) (*utils.RpcTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByBlockNumberAndIndex not implemented")
}
func (*UnimplementedTransactionPoolServer) GetTransactionByBlockHashAndIndex(ctx context.Context, req *utils.TransactionRequest) (*utils.RpcTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByBlockHashAndIndex not implemented")
}
func (*UnimplementedTransactionPoolServer) GetRawTransactionByBlockNumberAndIndex(ctx context.Context, req *RawTransactionRequest) (*RawTransactionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawTransactionByBlockNumberAndIndex not implemented")
}
func (*UnimplementedTransactionPoolServer) GetRawTransactionByBlockHashAndIndex(ctx context.Context, req *RawTransactionRequest) (*RawTransactionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawTransactionByBlockHashAndIndex not implemented")
}
func (*UnimplementedTransactionPoolServer) GetTransactionCount(ctx context.Context, req *TransactionCountRequest) (*TransactionCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionCount not implemented")
}
func (*UnimplementedTransactionPoolServer) GetTransactionCountIncludePending(ctx context.Context, req *TransactionCountRequest) (*TransactionCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionCountIncludePending not implemented")
}
func (*UnimplementedTransactionPoolServer) GetTransactionByHash(ctx context.Context, req *utils.TransactionRequest) (*utils.RpcTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByHash not implemented")
}
func (*UnimplementedTransactionPoolServer) GetRawTransactionByHash(ctx context.Context, req *RawTransactionRequest) (*RawTransactionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawTransactionByHash not implemented")
}
func (*UnimplementedTransactionPoolServer) GetTransactionReceipt(ctx context.Context, req *TransactionReceiptRequest) (*TransactionReceiptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionReceipt not implemented")
}
func (*UnimplementedTransactionPoolServer) SendRawTransaction(ctx context.Context, req *SendRawTransactionRequest) (*SendRawTransactionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRawTransaction not implemented")
}
func (*UnimplementedTransactionPoolServer) SendTransaction(ctx context.Context, req *utils.SendTx) (*utils.TxReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (*UnimplementedTransactionPoolServer) Sign(ctx context.Context, req *SignRequest) (*SignReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sign not implemented")
}
func (*UnimplementedTransactionPoolServer) SignTransaction(ctx context.Context, req *utils.SendTx) (*SignTransactionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignTransaction not implemented")
}
func (*UnimplementedTransactionPoolServer) PendingTransactions(ctx context.Context, req *PendingTransactionsRequest) (*PendingTransactionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingTransactions not implemented")
}
func (*UnimplementedTransactionPoolServer) Resend(ctx context.Context, req *ResendRequest) (*ResendReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resend not implemented")
}
func RegisterTransactionPoolServer(s *grpc.Server, srv TransactionPoolServer) {
	s.RegisterService(&_TransactionPool_serviceDesc, srv)
}
func _TransactionPool_GetBlockTransactionCountByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockTransactionCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolServer).GetBlockTransactionCountByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionpool.TransactionPool/GetBlockTransactionCountByNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolServer).GetBlockTransactionCountByNumber(ctx, req.(*BlockTransactionCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func _TransactionPool_GetBlockTransactionCountByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockTransactionCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolServer).GetBlockTransactionCountByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionpool.TransactionPool/GetBlockTransactionCountByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolServer).GetBlockTransactionCountByHash(ctx, req.(*BlockTransactionCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func _TransactionPool_GetTransactionByBlockNumberAndIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(utils.TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolServer).GetTransactionByBlockNumberAndIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionpool.TransactionPool/GetTransactionByBlockNumberAndIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolServer).GetTransactionByBlockNumberAndIndex(ctx, req.(*utils.TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func _TransactionPool_GetTransactionByBlockHashAndIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(utils.TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolServer).GetTransactionByBlockHashAndIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionpool.TransactionPool/GetTransactionByBlockHashAndIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolServer).GetTransactionByBlockHashAndIndex(ctx, req.(*utils.TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func _TransactionPool_GetRawTransactionByBlockNumberAndIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolServer).GetRawTransactionByBlockNumberAndIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionpool.TransactionPool/GetRawTransactionByBlockNumberAndIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolServer).GetRawTransactionByBlockNumberAndIndex(ctx, req.(*RawTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func _TransactionPool_GetRawTransactionByBlockHashAndIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolServer).GetRawTransactionByBlockHashAndIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionpool.TransactionPool/GetRawTransactionByBlockHashAndIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolServer).GetRawTransactionByBlockHashAndIndex(ctx, req.(*RawTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func _TransactionPool_GetTransactionCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolServer).GetTransactionCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionpool.TransactionPool/GetTransactionCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolServer).GetTransactionCount(ctx, req.(*TransactionCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func _TransactionPool_GetTransactionCountIncludePending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolServer).GetTransactionCountIncludePending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionpool.TransactionPool/GetTransactionCountIncludePending",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolServer).GetTransactionCountIncludePending(ctx, req.(*TransactionCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func _TransactionPool_GetTransactionByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(utils.TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolServer).GetTransactionByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionpool.TransactionPool/GetTransactionByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolServer).GetTransactionByHash(ctx, req.(*utils.TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func _TransactionPool_GetRawTransactionByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolServer).GetRawTransactionByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionpool.TransactionPool/GetRawTransactionByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolServer).GetRawTransactionByHash(ctx, req.(*RawTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func _TransactionPool_GetTransactionReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolServer).GetTransactionReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionpool.TransactionPool/GetTransactionReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolServer).GetTransactionReceipt(ctx, req.(*TransactionReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func _TransactionPool_SendRawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRawTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolServer).SendRawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionpool.TransactionPool/SendRawTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolServer).SendRawTransaction(ctx, req.(*SendRawTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func _TransactionPool_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(utils.SendTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionpool.TransactionPool/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolServer).SendTransaction(ctx, req.(*utils.SendTx))
	}
	return interceptor(ctx, in, info, handler)
}
func _TransactionPool_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionpool.TransactionPool/Sign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolServer).Sign(ctx, req.(*SignRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func _TransactionPool_SignTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(utils.SendTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolServer).SignTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionpool.TransactionPool/SignTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolServer).SignTransaction(ctx, req.(*utils.SendTx))
	}
	return interceptor(ctx, in, info, handler)
}
func _TransactionPool_PendingTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PendingTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolServer).PendingTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionpool.TransactionPool/PendingTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolServer).PendingTransactions(ctx, req.(*PendingTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func _TransactionPool_Resend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolServer).Resend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionpool.TransactionPool/Resend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolServer).Resend(ctx, req.(*ResendRequest))
	}
	return interceptor(ctx, in, info, handler)
}
var _TransactionPool_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transactionpool.TransactionPool",
	HandlerType: (*TransactionPoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getBlockTransactionCountByNumber",
			Handler:    _TransactionPool_GetBlockTransactionCountByNumber_Handler,
		},
		{
			MethodName: "getBlockTransactionCountByHash",
			Handler:    _TransactionPool_GetBlockTransactionCountByHash_Handler,
		},
		{
			MethodName: "getTransactionByBlockNumberAndIndex",
			Handler:    _TransactionPool_GetTransactionByBlockNumberAndIndex_Handler,
		},
		{
			MethodName: "getTransactionByBlockHashAndIndex",
			Handler:    _TransactionPool_GetTransactionByBlockHashAndIndex_Handler,
		},
		{
			MethodName: "getRawTransactionByBlockNumberAndIndex",
			Handler:    _TransactionPool_GetRawTransactionByBlockNumberAndIndex_Handler,
		},
		{
			MethodName: "getRawTransactionByBlockHashAndIndex",
			Handler:    _TransactionPool_GetRawTransactionByBlockHashAndIndex_Handler,
		},
		{
			MethodName: "getTransactionCount",
			Handler:    _TransactionPool_GetTransactionCount_Handler,
		},
		{
			MethodName: "getTransactionCountIncludePending",
			Handler:    _TransactionPool_GetTransactionCountIncludePending_Handler,
		},
		{
			MethodName: "getTransactionByHash",
			Handler:    _TransactionPool_GetTransactionByHash_Handler,
		},
		{
			MethodName: "getRawTransactionByHash",
			Handler:    _TransactionPool_GetRawTransactionByHash_Handler,
		},
		{
			MethodName: "getTransactionReceipt",
			Handler:    _TransactionPool_GetTransactionReceipt_Handler,
		},
		{
			MethodName: "sendRawTransaction",
			Handler:    _TransactionPool_SendRawTransaction_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _TransactionPool_SendTransaction_Handler,
		},
		{
			MethodName: "sign",
			Handler:    _TransactionPool_Sign_Handler,
		},
		{
			MethodName: "signTransaction",
			Handler:    _TransactionPool_SignTransaction_Handler,
		},
		{
			MethodName: "pendingTransactions",
			Handler:    _TransactionPool_PendingTransactions_Handler,
		},
		{
			MethodName: "resend",
			Handler:    _TransactionPool_Resend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transactionpool/transactionpool.proto",
}